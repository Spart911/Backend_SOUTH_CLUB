from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import os
from .config import settings
from .database import create_tables
from .api.v1 import auth, products, photos, slider, feedback, orders
from .core.exceptions import (
    ProductNotFoundException,
    PhotoNotFoundException,
    SliderPhotoNotFoundException,
    InvalidFileTypeException,
    FileSizeExceededException,
    TelegramBotException
)
from .core.logging import setup_logging, get_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = get_logger("Main")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="SOUTH CLUB Backend API",
    description=(
        "API –±–µ–∫–µ–Ω–¥–∞ SOUTH CLUB.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–º—É–ª—å—Ç–∏-—Ä–∞–∑–º–µ—Ä—ã: –ø–æ–ª–µ size ‚Äî –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª 0-4).\n"
        "- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "- –°–ª–∞–π–¥–µ—Ä: —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º (id, name, order_number).\n"
        "- –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ÆKassa –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
        "- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.\n"
        "- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."
    ),
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=600,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É
if os.path.exists(settings.upload_dir):
    # –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ URL: /app/uploads/<subdir>/<filename>
    app.mount("/app/uploads", StaticFiles(directory=settings.upload_dir), name="uploads")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç—ã
app.include_router(auth.router, prefix="/api/v1")
app.include_router(products.router, prefix="/api/v1")
app.include_router(photos.router, prefix="/api/v1")
app.include_router(slider.router, prefix="/api/v1")
app.include_router(feedback.router, prefix="/api/v1")
app.include_router(orders.router, prefix="/api/v1")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(ProductNotFoundException)
async def product_not_found_handler(request, exc):
    logger.warning(f"ProductNotFoundException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

@app.exception_handler(PhotoNotFoundException)
async def photo_not_found_handler(request, exc):
    logger.warning(f"PhotoNotFoundException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

@app.exception_handler(SliderPhotoNotFoundException)
async def slider_photo_not_found_handler(request, exc):
    logger.warning(f"SliderPhotoNotFoundException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

@app.exception_handler(InvalidFileTypeException)
async def invalid_file_type_handler(request, exc):
    logger.warning(f"InvalidFileTypeException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

@app.exception_handler(FileSizeExceededException)
async def file_size_exceeded_handler(request, exc):
    logger.warning(f"FileSizeExceededException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

@app.exception_handler(TelegramBotException)
async def telegram_bot_exception_handler(request, exc):
    logger.error(f"TelegramBotException: {exc.detail}")
    return {"detail": exc.detail, "status_code": exc.status_code}

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
@app.on_event("startup")
async def startup_event():
    """
    –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("–ó–∞–ø—É—Å–∫ SOUTH CLUB Backend...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
        create_tables()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –û—Ç–ª–∞–¥–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        logger.info("=== –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ===")
        for route in app.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                logger.info(f"–ü—É—Ç—å: {route.path}, –ú–µ—Ç–æ–¥—ã: {route.methods}")
        logger.info("=== –ö–æ–Ω–µ—Ü –æ—Ç–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===")
        
        logger.info("üöÄ SOUTH CLUB Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """
    –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("SOUTH CLUB Backend –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    logger.info("üõë SOUTH CLUB Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    """
    logger.info("–ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É")
    return {
        "message": "SOUTH CLUB Backend API",
        "version": "1.0.0",
        "docs": "/docs",
        "redoc": "/redoc"
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.debug("–ó–∞–ø—Ä–æ—Å health check")
    return {"status": "healthy", "message": "SOUTH CLUB Backend —Ä–∞–±–æ—Ç–∞–µ—Ç"}

# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞
@app.get("/test-slider")
async def test_slider():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞
    """
    try:
        from .database import SessionLocal
        from .models.slider_photo import SliderPhoto
        from sqlalchemy import select
        
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ª–∞–π–¥–µ—Ä–µ
            stmt = select(SliderPhoto)
            result = db.execute(stmt)
            photos = result.scalars().all()
            
            return {
                "message": "–°–ª–∞–π–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω",
                "total_photos": len(photos),
                "photos": [{"id": str(p.id), "name": p.name, "order": p.order_number} for p in photos]
            }
        finally:
            db.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–∞–π–¥–µ—Ä–∞: {str(e)}")
        return {"error": str(e)}
