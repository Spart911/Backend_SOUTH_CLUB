from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from typing import List
import ipaddress

from ...dependencies import get_db_session
from ...schemas.order import (
    OrderCreate, OrderResponse, OrderStatusResponse, 
    PaymentResponse, YooKassaNotification
)
from ...services.order import OrderService
from ...services.payment import PaymentService
from ...services.feedback import FeedbackService
from ...core.logging import get_logger
from ...config import settings

logger = get_logger(__name__)

router = APIRouter(prefix="/orders", tags=["orders"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
order_service = OrderService()
payment_service = PaymentService()
feedback_service = FeedbackService()

# IP-–∞–¥—Ä–µ—Å–∞ –ÆKassa –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook'–æ–≤
YOOKASSA_IPS = [
    ipaddress.ip_network("185.71.76.0/27"),
    ipaddress.ip_network("185.71.77.0/27"),
    ipaddress.ip_network("77.75.153.0/25"),
    ipaddress.ip_network("77.75.156.11/32"),
    ipaddress.ip_network("77.75.156.35/32"),
    ipaddress.ip_network("2a02:5180::/32"),
]


def is_yookassa_ip(ip: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ IP-–∞–¥—Ä–µ—Å –ÆKassa"""
    try:
        ip_obj = ipaddress.ip_address(ip)
        return any(ip_obj in network for network in YOOKASSA_IPS)
    except ValueError:
        return False


@router.post("/", response_model=PaymentResponse, status_code=status.HTTP_201_CREATED,
             summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", 
             description="–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞.")
async def create_order(
    order_data: OrderCreate,
    db: Session = Depends(get_db_session)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π —á–µ—Ä–µ–∑ –ÆKassa
    """
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è {order_data.email}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order = order_service.create_order(db, order_data)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        payment_data = payment_service.create_payment(
            order_id=order.id,
            amount=order.total_amount,
            description=f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å ID –ø–ª–∞—Ç–µ–∂–∞
        order_service.update_payment_id(db, order.id, payment_data["payment_id"])
        
        logger.info(f"–ó–∞–∫–∞–∑ {order.id} —Å–æ–∑–¥–∞–Ω, –ø–ª–∞—Ç–µ–∂ {payment_data['payment_id']} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω")
        
        return PaymentResponse(
            order_id=order.id,
            confirmation_token=payment_data["confirmation_token"]
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
        )


@router.get("/{order_id}", response_model=OrderResponse,
            summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑", 
            description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ –µ–≥–æ ID.")
async def get_order(
    order_id: int,
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
    """
    try:
        order = order_service.get_order(db, order_id)
        if not order:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return order
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
        )


@router.get("/{order_id}/status", response_model=OrderStatusResponse,
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", 
            description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ ID –ø–ª–∞—Ç–µ–∂–∞.")
async def get_order_status(
    order_id: int,
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    """
    try:
        order_status = order_service.get_order_status(db, order_id)
        if not order_status:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return order_status
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
        )


@router.get("/email/{email}", response_model=List[OrderResponse],
            summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ email", 
            description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞.")
async def get_orders_by_email(
    email: str,
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ email
    """
    try:
        orders = order_service.get_orders_by_email(db, email, skip, limit)
        return orders
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {email}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
        )


@router.post("/webhook", status_code=status.HTTP_200_OK,
             summary="Webhook –ÆKassa", 
             description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ÆKassa –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π.")
async def yookassa_webhook(
    request: Request,
    notification: YooKassaNotification,
    db: Session = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –ÆKassa
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞
        client_ip = request.client.host
        if not is_yookassa_ip(client_ip):
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω webhook —Å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ IP: {client_ip}")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π IP"
            )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {notification.event} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {notification.object.get('id')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if notification.event == "payment.succeeded":
            payment_id = notification.object.get("id")
            if payment_id:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                order = order_service.get_order_by_payment_id(db, payment_id)
                if order:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API
                    payment_status = payment_service.get_payment_status(payment_id)
                    if payment_status and payment_status["status"] == "succeeded":
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                        order_service.update_order_status(db, order.id, "paid")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                        try:
                            items_text = "\n".join([
                                f"- {item['name']} x{item['quantity']} ({item['price']} —Ä—É–±.)" 
                                for item in order.items
                            ])
                            
                            message = (
                                f"‚úÖ <b>–û–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n\n"
                                f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_amount} —Ä—É–±.\n"
                                f"üìß <b>Email:</b> {order.email}\n"
                                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n"
                                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
                                f"üïí <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.delivery_time}\n"
                                f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {order.order_time}\n\n"
                                f"üìã <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}"
                            )
                            
                            await feedback_service.send_telegram_message(message)
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}")
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        elif notification.event == "payment.waiting_for_capture":
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {notification.object.get('id')} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            
        elif notification.event == "payment.canceled":
            payment_id = notification.object.get("id")
            if payment_id:
                order = order_service.get_order_by_payment_id(db, payment_id)
                if order:
                    order_service.update_order_status(db, order.id, "canceled")
                    logger.info(f"–ó–∞–∫–∞–∑ {order.id} –æ—Ç–º–µ–Ω–µ–Ω")
        
        return {"status": "ok"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook"
        )


@router.get("/", response_model=List[OrderResponse],
            summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", 
            description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞).")
async def get_all_orders(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    """
    try:
        orders = order_service.get_recent_orders(db, skip, limit)
        return orders
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
        )


@router.get("/statistics/summary", 
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤", 
            description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∞).")
async def get_orders_statistics(
    db: Session = Depends(get_db_session)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
    """
    try:
        stats = order_service.get_orders_statistics(db)
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )

