import asyncio
from typing import Optional
from ..schemas.feedback import FeedbackCreate
from ..core.exceptions import TelegramBotException
from ..utils.telegram import TelegramBot


class FeedbackService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    
    def __init__(self):
        self.telegram_bot = TelegramBot()
    
    async def send_feedback(self, feedback_data: FeedbackCreate) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ Telegram
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_feedback_message(feedback_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await self.telegram_bot.send_message(message)
            
            return True
            
        except Exception as e:
            raise TelegramBotException(str(e))
    
    def _format_feedback_message(self, feedback: FeedbackCreate) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        """
        message = f"üÜï –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        message += f"üë§ –ò–º—è: {feedback.name}\n"
        message += f"üìß Email: {feedback.email}\n"
        
        if feedback.phone:
            message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {feedback.phone}\n"
        
        message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback.message}\n"
        
        return message
    
    async def send_test_message(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        """
        try:
            message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–µ–∫–µ–Ω–¥–∞ SOUTH CLUB"
            await self.telegram_bot.send_message(message)
            return True
        except Exception as e:
            raise TelegramBotException(str(e))

